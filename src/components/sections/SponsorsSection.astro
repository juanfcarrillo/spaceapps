---
const { title } = Astro.props;
const { description } = Astro.props;
const { sponsors } = Astro.props;
---

<style>
    .carousel-container {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 100%;
    }
    .carousel-wrapper {
        display: flex;
        transition: transform 0.5s ease-in-out;
        width: 100%;
        height: 100%;
    }
    .carousel-item {
        min-width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .carousel-img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }
</style>

<section class="sponsors-section py-10">
    <div class="max-w-max mx-auto">
        <div class="text-center">
            <h2 class="text-3xl font-bold mb-6 sm:mb-12 mx-auto">
                {title}
            </h2>
            <Fragment set:html={description} />
        </div>

        <div
            id="default-carousel"
            class="relative md:h-auto"
            data-carousel="static"
        >
            <!-- Carousel container -->
            <div class="carousel-container h-56 sm:h-64 xl:h-80 2xl:h-96">
                <div class="carousel-wrapper">
                    {
                        sponsors.map((item: any) => (
                            <div class="carousel-item flex justify-center items-center">
                                <div class="flex flex-col md:flex-row justify-center items-center md:space-x-4">
                                    {item.map((data: any) => (
                                        <a
                                            href={data.url}
                                            target="_blank"
                                            class="max-w-[30%] max-h-[30%] md:max-w-[15%] md:max-h-[15%]"
                                        >
                                            <img
                                                src={data.image}
                                                class="carousel-img"
                                                alt={data.alt}
                                            />
                                        </a>
                                    ))}
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
            <!-- Carousel indicators -->
            <div
                class="flex absolute bottom-5 left-1/2 z-30 space-x-3 -translate-x-1/2"
            >
            {sponsors.map((index: number) => (
                <button
                  type="button"
                  class="w-3 h-3 rounded-full"
                  aria-current="false"
                  aria-label={`Slide ${index + 1}`}
                  data-carousel-slide-to={index}
                />
              ))}
            </div>
            <!-- Carousel control -->
            <button
                type="button"
                class="flex absolute top-0 left-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none"
                data-carousel-prev
            >
                <span
                    class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
                >
                    <svg
                        class="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-800"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"></path>
                    </svg>
                    <span class="hidden">Previous</span>
                </span>
            </button>
            <button
                type="button"
                class="flex absolute top-0 right-0 z-30 justify-center items-center px-4 h-full cursor-pointer group focus:outline-none"
                data-carousel-next
            >
                <span
                    class="inline-flex justify-center items-center w-8 h-8 rounded-full sm:w-10 sm:h-10 bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70 group-focus:outline-none"
                >
                    <svg
                        class="w-5 h-5 text-white sm:w-6 sm:h-6 dark:text-gray-800"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        xmlns="http://www.w3.org/2000/svg"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M9 5l7 7-7 7"></path>
                    </svg>
                    <span class="hidden">Next</span>
                </span>
            </button>
        </div>
    </div>
</section>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const carousel = document.getElementById("default-carousel");
        const wrapper = carousel?.querySelector(".carousel-wrapper");
        const items = carousel?.querySelectorAll(".carousel-item");
        const indicators = carousel?.querySelectorAll(
            "[data-carousel-slide-to]",
        );
        const prevButton = carousel?.querySelector("[data-carousel-prev]");
        const nextButton = carousel?.querySelector("[data-carousel-next]");
        let currentIndex = 0;
        let intervalId: NodeJS.Timeout;

        function showSlide(index: number) {
            if (wrapper instanceof HTMLElement) {
                wrapper.style.transition = "transform 0.5s ease-in-out";
                wrapper.style.transform = `translateX(-${index * 100}%)`;
            }
            indicators?.forEach((indicator, i) => {
                indicator.setAttribute(
                    "aria-current",
                    i === index ? "true" : "false",
                );
                indicator.classList.toggle("bg-white", i === index);
                indicator.classList.toggle("bg-gray-400", i !== index);
            });
        }

        function showNextSlide() {
            currentIndex = (currentIndex + 1) % (items?.length || 0);
            if (currentIndex === 0 && wrapper instanceof HTMLElement) {
                wrapper.style.transition = "none"; // Disable transition for instant reset
                wrapper.style.transform = `translateX(0)`;
                setTimeout(() => {
                    wrapper.style.transition = "transform 0.5s ease-in-out";
                    currentIndex = 0; // Ensure we stay at the first item after reset
                    showSlide(currentIndex);
                }, 50); // Small delay to allow instant reset
            } else {
                showSlide(currentIndex);
            }
        }

        function showPrevSlide() {
            currentIndex =
                (currentIndex - 1 + (items?.length || 0)) %
                (items?.length || 0);
            showSlide(currentIndex);
        }

        function startAutoSlide() {
            intervalId = setInterval(showNextSlide, 5000);
        }

        function stopAutoSlide() {
            clearInterval(intervalId);
        }

        nextButton?.addEventListener("click", () => {
            stopAutoSlide();
            showNextSlide();
            startAutoSlide();
        });

        prevButton?.addEventListener("click", () => {
            stopAutoSlide();
            showPrevSlide();
            startAutoSlide();
        });

        indicators?.forEach((indicator, i) => {
            indicator.addEventListener("click", () => {
                stopAutoSlide();
                currentIndex = i;
                showSlide(currentIndex);
                startAutoSlide();
            });
        });

        carousel?.addEventListener("mouseenter", stopAutoSlide);
        carousel?.addEventListener("mouseleave", startAutoSlide);

        showSlide(currentIndex);
        startAutoSlide();
    });
</script>
